// Generated by CoffeeScript 1.7.1
(function() {
  var AModal, angularModal, angular_modal_module_name;

  angular_modal_module_name = "angular.modal";

  AModal = (function() {
    var constants, manipulateDom;

    constants = {
      popup_statuses: {
        visible: "active",
        hidden: "hidden"
      }
    };

    manipulateDom = function(popup) {
      var elm, raw;
      raw = popup.elm;
      elm = angular.element(raw);
      elm.addClass(popup.config.dom_class);
      if (popup.status === constants.popup_statuses.active) {
        return elm.addClass(popup.config.dom_active_class);
      } else {
        return elm.removeClass(popup.config.dom_active_class);
      }
    };

    function AModal(options, config) {
      if (options == null) {
        options = {};
      }
      this.config = config;
      this.elm = options.elm, this.id = options.id, this.type = options.type, this.status = options.status;
      this.status || (this.status = constants.popup_statuses.hidden);
      this.attached_events = {
        "onOpen": [],
        "onClose": []
      };
      manipulateDom(this);
    }

    AModal.prototype.open = function() {
      if (this.status === constants.popup_statuses.hidden) {
        this.fire("onOpen");
      }
      this.status = constants.popup_statuses.active;
      return manipulateDom(this);
    };

    AModal.prototype.close = function() {
      if (this.status === constants.popup_statuses.active) {
        this.fire("onClose");
      }
      this.status = constants.popup_statuses.hidden;
      return manipulateDom(this);
    };

    AModal.prototype.on = function(event_name, handler) {
      event_name = event_name.toLowerCase();
      event_name = event_name.charAt(0).toUpperCase() + event_name.substring(1);
      event_name = "on" + event_name;
      return this.attached_events[event_name].push(handler);
    };

    AModal.prototype.fire = function(event_name) {
      var event, _i, _len, _ref, _results;
      _ref = this.attached_events[event_name];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        event = _ref[_i];
        _results.push(event(this));
      }
      return _results;
    };

    AModal.prototype.clearEvent = function(event_name) {
      return this.attached_events[event_name] = [];
    };

    return AModal;

  })();

  angularModal = angular.module(angular_modal_module_name, []).provider('$modalTemplates', [
    function() {
      var available_templates;
      available_templates = {
        "default": "<div adapt-to-parent='centered'> <div class='closer_overlay' ng-click='$modal.closeAll()' ng-show='closable || true'></div> <div class='window' ng-class='windowClass'> <div  style='font-size: 2em;position: absolute;right: 0.5em;z-index: 1;cursor:pointer' ng-click='$modal.closeAll()' class='close_popup_x' ng-show='closable || true'> &times; </div> <div  class='content' ng-class='contentClass' ng-init='in_popup = true; data = popup.message' ng-transclude> </div> </div> </div>"
      };
      this.current_template = 'default';
      this.getTemplate = function(id) {
        return available_templates[id];
      };
      this.push = function(id, template) {
        return available_templates[id] = template;
      };
      this.$get = [
        '$timeout', function($timeout) {
          return this;
        }
      ];
      return this;
    }
  ]);

  angularModal.provider('$modal', [
    '$modalTemplatesProvider', function($modalTemplatesProvider) {
      var EventHandler, available_modals, config, event_handler, modal_provider_object, popup_statuses, set;
      popup_statuses = {
        visible: "active",
        hidden: "hidden"
      };
      config = {
        dom_id_prefix: "modalized_",
        dom_class: "modal",
        dom_active_class: "active"
      };
      available_modals = {};
      this.log = function(message, method) {
        if (method == null) {
          method = 'log';
        }
        return console[method]("# angular.modal => ", message);
      };
      set = function(modal) {
        return available_modals[modal.id] = modal;
      };
      this.current_template = function() {
        return $modalTemplatesProvider.getTemplate($modalTemplatesProvider.current_template);
      };
      this.push = function(popup) {
        var newpopup;
        if (popup == null) {
          popup = {};
        }
        newpopup = set(new AModal(popup, config));
        event_handler.refreshEvents();
        return newpopup;
      };
      this.get = function(id) {
        return available_modals[id];
      };
      this.configSet = function(property, value) {
        return config[property] = value;
      };
      this.configGet = function(property) {
        return config[property];
      };
      modal_provider_object = this;
      EventHandler = (function() {
        var events_to_attach;

        events_to_attach = [];

        function EventHandler() {}

        EventHandler.prototype.register = function(modal_id, event_name, handler) {
          events_to_attach.push({
            modal_id: modal_id,
            event_name: event_name,
            handler: handler
          });
          return this.refreshEvents();
        };

        EventHandler.prototype.refreshEvents = function() {
          var event, modal, _i, _len;
          for (_i = 0, _len = events_to_attach.length; _i < _len; _i++) {
            event = events_to_attach[_i];
            if (!(event)) {
              continue;
            }
            modal = modal_provider_object.get(event.modal_id);
            if (modal) {
              if (modal) {
                modal.on(event.event_name, event.handler);
              }
              events_to_attach.splice(_i, 1);
            }
          }
          return events_to_attach;
        };

        return EventHandler;

      })();
      event_handler = new EventHandler();
      this.attachEventTo = function(modal_id, event_name, handler) {
        return event_handler.register(modal_id, event_name, handler);
      };
      this.$get = [
        '$timeout', function($timeout) {
          this.closeAll = function() {
            var modal, modal_id, _results;
            _results = [];
            for (modal_id in available_modals) {
              modal = available_modals[modal_id];
              _results.push(modal.close());
            }
            return _results;
          };
          this.open = function(id) {
            this.closeAll();
            if (available_modals[id] === void 0) {
              return this.log("Angular.modal: There is no popup with id " + id, "warn");
            } else {
              return $timeout(function() {
                return available_modals[id].open();
              }, 300);
            }
          };
          this.isOpened = function(id) {
            if (available_modals[id] !== void 0) {
              return available_modals[id].status === popup_statuses.active;
            }
          };
          return this;
        }
      ];
      return this;
    }
  ]);

  angularModal.directive("modalize", [
    '$modal', function($modal) {
      return {
        restrict: "A",
        link: function(scope, elm, attr) {
          var modal_id, type;
          modal_id = attr.modalize;
          type = "html";
          $modal.push({
            type: type,
            id: modal_id,
            elm: elm
          });
          return true;
        }
      };
    }
  ]);

  angularModal.directive("modalizeD", [
    '$modal', function($modal) {
      return {
        restrict: "A",
        scope: {
          src: "@"
        },
        template: "<div ng-include='modalSource(src)'></div>",
        link: function(scope, elm, attr) {
          var fullyLoaded, modal_id, type;
          modal_id = attr.modalizeD;
          scope.binding = scope.$parent;
          if ($modal.configGet('inject_into_html')) {
            scope.$modal = $modal;
          }
          fullyLoaded = false;
          scope.modalSource = function(src) {
            if ($modal.isOpened(modal_id) || fullyLoaded) {
              fullyLoaded = true;
              return src;
            } else {
              return null;
            }
          };
          type = "html";
          if (attr.src != null) {
            type = "link";
          }
          $modal.push({
            type: type,
            id: modal_id,
            elm: elm
          });
          return true;
        }
      };
    }
  ]);

  angularModal.directive("modalize", [
    '$modal', function($modal) {
      return {
        restrict: "E",
        scope: {
          windowClass: "@",
          contentClass: "@",
          closable: "@",
          centered: "@"
        },
        replace: true,
        transclude: true,
        controller: [
          '$scope', '$modal', function($scope, $modal) {
            return $scope.$modal = $modal;
          }
        ],
        template: $modal.current_template()
      };
    }
  ]);

  angularModal.directive("adaptToParent", [
    '$timeout', function($timeout) {
      return {
        restrict: "A",
        link: function(scope, elm, attr) {
          var time;
          time = window.setInterval(function() {
            var height, parent, width;
            if (scope.centered !== "false") {
              elm.css("display", "table-cell");
              elm.css("vertical-align", "middle");
              if (window.jQuery) {
                parent = elm.offsetParent();
                height = parent.height();
                width = parent.width();
                elm.height(height);
                return elm.width(width);
              } else {
                parent = elm.parent()[0];
                height = parent.offsetHeight;
                width = parent.offsetWidth;
                elm[0].style.height = height;
                return elm[0].style.width = width;
              }
            } else {
              return window.clearInterval(time);
            }
          }, 100);
          return true;
        }
      };
    }
  ]);

  angularModal.run([
    '$modal', '$modalTemplates', '$rootScope', function($modal, $modalTemplates, $rootScope) {
      if ($modal.configGet('inject_into_html')) {
        $rootScope.$modal = $modal;
        return window.$modal = $modal;
      }
    }
  ]);

}).call(this);
